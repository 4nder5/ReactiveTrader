// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using WatchKit;
using Adaptive.ReactiveTrader.Client.Domain.Models;
using UIKit;
using Adaptive.ReactiveTrader.Client.Domain.Models.Execution;
using Adaptive.ReactiveTrader.Client.iOS.Shared;

namespace Adaptive.ReactiveTrader.Client.iOSTab.WatchKitExtension
{
	public partial class TradeConfirmController : WKInterfaceController
	{
        public static string Name
        {
            get { return "confirmation"; }
        }

		public TradeConfirmController (IntPtr handle) : base (handle)
		{
		}

        static readonly UIStringAttributes _grey = new UIStringAttributes { ForegroundColor = UIColor.LightGray };
        static readonly UIStringAttributes _normal = new UIStringAttributes();

        static readonly UIStringAttributes _smallGrey = new UIStringAttributes { ForegroundColor = UIColor.LightGray, Font = UIFont.SystemFontOfSize(10) };
        static readonly UIStringAttributes _small = new UIStringAttributes { Font = UIFont.SystemFontOfSize(10) };

        ITrade _trade;

        public override void Awake(NSObject context)
        {
            base.Awake(context);

            if (context == null)
            {
                throw new ArgumentNullException("context");
            }

            var tradeId = ((NSNumber)context).LongValue;
            var trade = Trades.Shared[tradeId];

            if (trade == null)
            {
                throw new NullReferenceException("Couldn't find trade");
            }

            _trade = trade;
        }


        public override void WillActivate()
        {
            base.WillActivate();

            var trade = _trade;
            var currency = trade.CurrencyPair.Replace(trade.DealtCurrency, ""); // Hack

            SetTitle(trade.DealtCurrency + "/" + currency);

            var text = trade.ToAttributedString();

            if (TradeDetailsLabel == null)
            {
                Console.WriteLine("label is null");
            }

            DetailsLabel.SetText(text);
        }

        partial void DoneTapped()
        {
            DismissController();
        }
	}

}
